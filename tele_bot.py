import requests
import logging
from logging.handlers import RotatingFileHandler

from telegram.ext import (Updater,
                          Filters,
                          MessageHandler,
                          CommandHandler)
from telegram import ReplyKeyboardMarkup

from constants import (BASE_DIR,
                       DT_FORMAT,
                       KEY,
                       LOG_FORMAT,
                       TOKEN,
                       URL_CAT,
                       URL_TRANSLATE,
                       URL_WEATHER,
                       CONVERTER_PRESSURE)


log_dir = BASE_DIR / 'logs'
log_dir.mkdir(exist_ok=True)
log_file = log_dir / 'bot.log'
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
rotating_handler = RotatingFileHandler(
    log_file, maxBytes=10 ** 6, backupCount=5, encoding='utf-8'
)
logging.basicConfig(
    datefmt=DT_FORMAT,
    format=LOG_FORMAT,
    level=logging.INFO,
    handlers=(rotating_handler, logging.StreamHandler())
)
formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)


updater = Updater(token=TOKEN)


def get_image():
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API –∫–æ—Ç–æ–≤."""
    try:
        response = requests.get(URL_CAT).json()
        logger.info('–ó–∞–ø—Ä–æ—Å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
    except Exception as error:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É API: {error}')
        new_url = 'https://api.thedogapi.com/v1/images/search'
        response = requests.get(new_url)
    random_cat = response[0].get('url')
    return random_cat


def what_weather(city):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã."""
    try:
        querystring = {"q": f"{city}", "days": "1"}
        headers = {
            "X-RapidAPI-Key": "a15a7e959cmsh7fc7c4400cf946cp167646jsn7f3812b1db78",
            "X-RapidAPI-Host": "weatherapi-com.p.rapidapi.com"
        }
        response = requests.get(URL_WEATHER, headers=headers, params=querystring)
        if response.ok:
            answer = response.json().get('current')
            last_updated = answer.get('last_updated')
            temperature = answer.get('temp_c')
            wind_mph = answer.get('wind_mph')
            pressure_mb = answer.get('pressure_mb')
            feels_like_c = answer.get('feelslike_c')
            logger.info('–î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!')
            return (
                f'–ü–æ–≥–æ–¥–∞ –Ω–∞: {last_updated}, –≤ –≥–æ—Ä–æ–¥–µ {city}. '
                f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(temperature)}¬∞C, '
                f'–ü–æ –æ—â—É—â–µ–Ω–∏—è–º: {feels_like_c}¬∞C, '
                f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_mph}–º/—Å, '
                f'–î–∞–≤–ª–µ–Ω–∏–µ: {round(pressure_mb * CONVERTER_PRESSURE)}–º–º.—Ä—Ç.c—Ç. '
            )
        else:
            logger.error(f'–°—Ç–∞—Ç—É—Å {response.status_code}')
    except Exception as er:
        logger.error(f'–û—à–∏–±–∫–∞ {er}')
        return f'–û—à–∏–±–∫–∞ {er}'


def where_lives(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ—É–Ω–∫—Ü–∏–∏ what_weather."""
    context.user_data['state'] = 'where_you_lives'
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É: ')
    logger.info('–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')


def new_cat(update, context):
    """–§—É–Ω–∫—Ü–∏—è –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ—Ç–æ–≤(–∏–ª–∏ —Å–æ–±–∞–∫)."""
    chat = update.effective_chat
    context.bot.send_message(chat.id, get_image())
    logger.info('–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')


def say_hi(update, context):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –±–æ—Ç–∞."""
    chat = update.effective_chat
    name = update.message.chat.first_name
    context.bot.send_message(chat_id=chat.id,
                             text='–ü—Ä–∏–≤–µ—Ç, {}! –Ø –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫!'.format(name))


def buttons_func(update, context):
    """–§—É–Ω–∫—Ü–∏—è –∫–Ω–æ–ø–æ–∫."""
    chat = update.effective_chat
    buttons = ReplyKeyboardMarkup([['/Foto_catüêæ',
                                    '/Weatherüå¶Ô∏è',
                                    '/TranslateüàØ',
                                    '/Cancel‚ùå',
                                    ]], resize_keyboard=True)
    context.bot.send_message(
        chat_id=chat.id,
        text='–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤–∫–ª—é—á–µ–Ω–∏–µ!',
        reply_markup=buttons
        )
    logger.info('–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!')


def translate_text(text, to_language='en'):
    """–§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–µ–≤–æ–¥–∞ –≤ —Ä–µ–∂–∏–º–µ –æ–Ω–ª–∞–π–Ω."""
    try:
        querystring = {"to[0]": f"{to_language}",
                       "api-version": "3.0",
                       "profanityAction": "NoAction",
                       "textType": "plain"
                       }
        payload = [{"Text": f"{text}"}]
        headers = {
            "X-RapidAPI-Key": f"{KEY}",
        }
        response = requests.post(URL_TRANSLATE, json=payload, headers=headers, params=querystring)
        translate = response.json()[0].get('translations')[0].get('text')
        if response.ok:
            logger.info('–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!')
            return translate.capitalize()
        else:
            logger.error(f'–°—Ç–∞—Ç—É—Å {response.status_code}')
            return '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É'
    except Exception as er:
        logger.error(f'–û—à–∏–±–∫–∞{er}.')
        return f'–û—à–∏–±–∫–∞ {er}'


def start_translater(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /translate."""
    context.user_data['state'] = 'translate'
    update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞(–≤ –¥–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ ru-en): ')
    logger.info('–û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!')


def handle_text(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = context.user_data.get('state', 'normal')
    if state == 'translate':
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ '–ø–µ—Ä–µ–≤–æ–¥', –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        text = update.message.text
        translated_text = translate_text(text)
        update.message.reply_text(translated_text)
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        context.user_data['state'] = 'normal'
    if state == 'where_you_lives':
        city = update.message.text
        city_users = what_weather(city)
        update.message.reply_text(city_users)
        context.user_data['state'] = 'normal'


def cancel(update, context):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
    context.user_data['state'] = 'normal'
    update.message.reply_text('–û—Ç–º–µ–Ω–µ–Ω–æ')
    logger.info('–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')


def main():
    updater.dispatcher.add_handler(CommandHandler('start', buttons_func))
    updater.dispatcher.add_handler(CommandHandler('translate', start_translater))
    updater.dispatcher.add_handler(CommandHandler('weather', where_lives))
    updater.dispatcher.add_handler(CommandHandler('foto_cat', new_cat))
    updater.dispatcher.add_handler(CommandHandler('cancel', cancel))
    updater.dispatcher.add_handler(MessageHandler(Filters.text, handle_text))
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    logger.info('–ë–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É')
    main()
